generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model dish_category {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime                  @default(now()) @db.Timestamp(6)
  description             String?
  name                    String?                   @db.VarChar(255)
  tags                    String?                   @db.VarChar(255)
  dish_category_image     String?                   @db.VarChar(255)
  dish_category_status    Boolean
  dish_category_color     String?                   @db.VarChar(255)
  menu_id                 String?                   @db.Uuid
  menu                    menu?                     @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dish_category_menu_item dish_category_menu_item[]
  menu_dish_category      menu_dish_category[]
}

model dish_category_menu_item {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  updated_at          DateTime       @default(now()) @db.Timestamp(6)
  menu_item_id        String?        @db.Uuid
  dish_category_id    String?        @db.Uuid
  availability_status String         @db.VarChar(255)
  dish_category       dish_category? @relation(fields: [dish_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu_item           menu_item?     @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime             @default(now()) @db.Timestamp(6)
  updated_at          DateTime             @default(now()) @db.Timestamp(6)
  availability_status Boolean
  description         String?
  name                String?              @db.VarChar(255)
  image               String?              @db.VarChar(255)
  restaurant_id       String?              @db.Uuid
  dish_category       dish_category[]
  restaurant          restaurant?          @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu_dish_category  menu_dish_category[]
}

model menu_dish_category {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  updated_at          DateTime       @default(now()) @db.Timestamp(6)
  description         String?
  availability_status Boolean?
  menu_id             String?        @db.Uuid
  dish_category_id    String?        @db.Uuid
  dish_category       dish_category? @relation(fields: [dish_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu                menu?          @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_item {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime                  @default(now()) @db.Timestamp(6)
  availability_status     Boolean
  dish_description        String?
  dish_image_url          String?                   @db.VarChar(255)
  dish_price              Float
  dish_calories           Int?
  dish_ingredients        String?
  dish_preparation_time   Int?
  dish_name               String?                   @db.VarChar(255)
  dish_allergens          String?
  dish_spiciness_level    Int?
  dish_vegan              Boolean?
  dish_gluten_free        Boolean?
  dish_category_menu_item dish_category_menu_item[]
}

model restaurant {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  menu        menu[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  restaurant  restaurant[]
}
